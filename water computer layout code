package water_computer_layout;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Timer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import com.anylogic.engine.connectivity.ResultSet;
import com.anylogic.engine.connectivity.Statement;
import com.anylogic.engine.elements.*;
import com.anylogic.engine.markup.Network;
import com.anylogic.engine.Position;
import com.anylogic.engine.markup.PedFlowStatistics;
import com.anylogic.engine.markup.DensityMap;


import static java.lang.Math.*;
import static com.anylogic.engine.UtilitiesArray.*;
import static com.anylogic.engine.UtilitiesCollection.*;
import static com.anylogic.engine.presentation.UtilitiesColor.*;
import static com.anylogic.engine.HyperArray.*;

import com.anylogic.engine.*;
import com.anylogic.engine.analysis.*;
import com.anylogic.engine.connectivity.*;
import com.anylogic.engine.database.*;
import com.anylogic.engine.gis.*;
import com.anylogic.engine.markup.*;
import com.anylogic.engine.routing.*;
import com.anylogic.engine.presentation.*;
import com.anylogic.engine.gui.*;

import com.anylogic.libraries.modules.markup_descriptors.*;
import com.anylogic.libraries.fluid.*;
import com.anylogic.libraries.processmodeling.*;

import java.awt.geom.Arc2D;

public class Main extends Agent
{
  // Parameters
  @AnyLogicInternalCodegenAPI
  private static Map<String, IElementDescriptor> elementDesciptors_xjal = createElementDescriptors( Main.class );
  
  @AnyLogicInternalCodegenAPI
  @Override
  public Map<String, IElementDescriptor> getElementDesciptors() {
    return elementDesciptors_xjal;
  }
  @AnyLogicCustomProposalPriority(type = AnyLogicCustomProposalPriority.Type.STATIC_ELEMENT)
  public static final Scale scale = new Scale( 10.0 );

  @Override
  public Scale getScale() {
    return scale;
  }



	

  /** Internal constant, shouldn't be accessed by user */
  @AnyLogicInternalCodegenAPI
  protected static final int _STATECHART_COUNT_xjal = 0;


  // Embedded Objects

  public com.anylogic.libraries.fluid.FluidSource d1ofn1;
  public com.anylogic.libraries.fluid.FluidSource d1ofn2;
  public com.anylogic.libraries.fluid.Pipeline pipeno7;
  public com.anylogic.libraries.fluid.Pipeline pipeno6;
  public com.anylogic.libraries.fluid.Pipeline pipeno24;
  public com.anylogic.libraries.fluid.Pipeline pipeno18;
  public com.anylogic.libraries.fluid.FluidSelectOutput InputDivider1;
  public com.anylogic.libraries.fluid.FluidMerge Bifer1;
  public com.anylogic.libraries.fluid.ProcessTank Gate1;
  public com.anylogic.libraries.fluid.FluidSelectOutput bifer;
  public com.anylogic.libraries.fluid.Pipeline pipeno17;
  public com.anylogic.libraries.fluid.Pipeline pipeno22;
  public com.anylogic.libraries.fluid.ProcessTank Fic;
  public com.anylogic.libraries.fluid.FluidDispose Dispose;
  public com.anylogic.libraries.fluid.FluidSource d2ofn1;
  public com.anylogic.libraries.fluid.FluidSource d2ofn2;
  public com.anylogic.libraries.fluid.Pipeline pipeno5;
  public com.anylogic.libraries.fluid.Pipeline pipeno4;
  public com.anylogic.libraries.fluid.FluidMerge Bifer2;
  public com.anylogic.libraries.fluid.ProcessTank Gate2;
  public com.anylogic.libraries.fluid.FluidSelectOutput InputDivider2;
  public com.anylogic.libraries.fluid.Pipeline pipeno25;
  public com.anylogic.libraries.fluid.Pipeline pipeno16;
  public com.anylogic.libraries.fluid.Pipeline pipeno30;
  public com.anylogic.libraries.fluid.FluidSelectOutput bifer1;
  public com.anylogic.libraries.fluid.Pipeline pipeno15;
  public com.anylogic.libraries.fluid.Pipeline pipeno21;
  public com.anylogic.libraries.fluid.Pipeline pipeno14;
  public com.anylogic.libraries.fluid.Pipeline pipeno29;
  public com.anylogic.libraries.fluid.FluidSource d3ofn1;
  public com.anylogic.libraries.fluid.FluidSource d3ofn2;
  public com.anylogic.libraries.fluid.Pipeline pipeno3;
  public com.anylogic.libraries.fluid.Pipeline pipeno2;
  public com.anylogic.libraries.fluid.FluidMerge Bifer3;
  public com.anylogic.libraries.fluid.ProcessTank Gate3;
  public com.anylogic.libraries.fluid.FluidSelectOutput InputDivider3;
  public com.anylogic.libraries.fluid.Pipeline pipeno26;
  public com.anylogic.libraries.fluid.Pipeline pipeno13;
  public com.anylogic.libraries.fluid.FluidSelectOutput bifer2;
  public com.anylogic.libraries.fluid.Pipeline pipeno12;
  public com.anylogic.libraries.fluid.Pipeline pipeno20;
  public com.anylogic.libraries.fluid.Pipeline pipeno11;
  public com.anylogic.libraries.fluid.FluidSource d4ofn1;
  public com.anylogic.libraries.fluid.FluidSource d4ofn2;
  public com.anylogic.libraries.fluid.Pipeline pipeno0;
  public com.anylogic.libraries.fluid.Pipeline pipeno1;
  public com.anylogic.libraries.fluid.FluidMerge Bifer4;
  public com.anylogic.libraries.fluid.ProcessTank Gate4;
  public com.anylogic.libraries.fluid.FluidSelectOutput InputDivider4;
  public com.anylogic.libraries.fluid.Pipeline pipeno28;
  public com.anylogic.libraries.fluid.FluidSelectOutput bifer3;
  public com.anylogic.libraries.fluid.Pipeline pipeno10;
  public com.anylogic.libraries.fluid.Pipeline pipeno19;
  public com.anylogic.libraries.fluid.Pipeline pipeno27;
  public com.anylogic.libraries.fluid.Pipeline pipeno8;
  public com.anylogic.libraries.fluid.Pipeline pipeno9;
  public com.anylogic.libraries.fluid.FluidDispose Dispose1;
  public com.anylogic.libraries.fluid.FluidDispose Dispose2;
  public com.anylogic.libraries.fluid.FluidDispose Dispose3;
  public com.anylogic.libraries.fluid.FluidMerge op;
  public com.anylogic.libraries.fluid.ProcessTank siphon1;
  public com.anylogic.libraries.fluid.FluidMerge op2;
  public com.anylogic.libraries.fluid.FluidMerge op3;
  public com.anylogic.libraries.fluid.ProcessTank siphon2;
  public com.anylogic.libraries.fluid.FluidMerge op4;
  public com.anylogic.libraries.fluid.ProcessTank siphon3;
  public com.anylogic.libraries.fluid.FluidMerge op5;
  public com.anylogic.libraries.fluid.FluidMerge op6;
  public com.anylogic.libraries.fluid.ProcessTank Sic;

  public String getNameOf( Agent ao ) {
    if ( ao == d1ofn1 ) return "d1ofn1";
    if ( ao == d1ofn2 ) return "d1ofn2";
    if ( ao == pipeno7 ) return "pipeno7";
    if ( ao == pipeno6 ) return "pipeno6";
    if ( ao == pipeno24 ) return "pipeno24";
    if ( ao == pipeno18 ) return "pipeno18";
    if ( ao == InputDivider1 ) return "InputDivider1";
    if ( ao == Bifer1 ) return "Bifer1";
    if ( ao == Gate1 ) return "Gate1";
    if ( ao == bifer ) return "bifer";
    if ( ao == pipeno17 ) return "pipeno17";
    if ( ao == pipeno22 ) return "pipeno22";
    if ( ao == Fic ) return "Fic";
    if ( ao == Dispose ) return "Dispose";
    if ( ao == d2ofn1 ) return "d2ofn1";
    if ( ao == d2ofn2 ) return "d2ofn2";
    if ( ao == pipeno5 ) return "pipeno5";
    if ( ao == pipeno4 ) return "pipeno4";
    if ( ao == Bifer2 ) return "Bifer2";
    if ( ao == Gate2 ) return "Gate2";
    if ( ao == InputDivider2 ) return "InputDivider2";
    if ( ao == pipeno25 ) return "pipeno25";
    if ( ao == pipeno16 ) return "pipeno16";
    if ( ao == pipeno30 ) return "pipeno30";
    if ( ao == bifer1 ) return "bifer1";
    if ( ao == pipeno15 ) return "pipeno15";
    if ( ao == pipeno21 ) return "pipeno21";
    if ( ao == pipeno14 ) return "pipeno14";
    if ( ao == pipeno29 ) return "pipeno29";
    if ( ao == d3ofn1 ) return "d3ofn1";
    if ( ao == d3ofn2 ) return "d3ofn2";
    if ( ao == pipeno3 ) return "pipeno3";
    if ( ao == pipeno2 ) return "pipeno2";
    if ( ao == Bifer3 ) return "Bifer3";
    if ( ao == Gate3 ) return "Gate3";
    if ( ao == InputDivider3 ) return "InputDivider3";
    if ( ao == pipeno26 ) return "pipeno26";
    if ( ao == pipeno13 ) return "pipeno13";
    if ( ao == bifer2 ) return "bifer2";
    if ( ao == pipeno12 ) return "pipeno12";
    if ( ao == pipeno20 ) return "pipeno20";
    if ( ao == pipeno11 ) return "pipeno11";
    if ( ao == d4ofn1 ) return "d4ofn1";
    if ( ao == d4ofn2 ) return "d4ofn2";
    if ( ao == pipeno0 ) return "pipeno0";
    if ( ao == pipeno1 ) return "pipeno1";
    if ( ao == Bifer4 ) return "Bifer4";
    if ( ao == Gate4 ) return "Gate4";
    if ( ao == InputDivider4 ) return "InputDivider4";
    if ( ao == pipeno28 ) return "pipeno28";
    if ( ao == bifer3 ) return "bifer3";
    if ( ao == pipeno10 ) return "pipeno10";
    if ( ao == pipeno19 ) return "pipeno19";
    if ( ao == pipeno27 ) return "pipeno27";
    if ( ao == pipeno8 ) return "pipeno8";
    if ( ao == pipeno9 ) return "pipeno9";
    if ( ao == Dispose1 ) return "Dispose1";
    if ( ao == Dispose2 ) return "Dispose2";
    if ( ao == Dispose3 ) return "Dispose3";
    if ( ao == op ) return "op";
    if ( ao == siphon1 ) return "siphon1";
    if ( ao == op2 ) return "op2";
    if ( ao == op3 ) return "op3";
    if ( ao == siphon2 ) return "siphon2";
    if ( ao == op4 ) return "op4";
    if ( ao == siphon3 ) return "siphon3";
    if ( ao == op5 ) return "op5";
    if ( ao == op6 ) return "op6";
    if ( ao == Sic ) return "Sic";
    return super.getNameOf( ao );
  }

  public AgentAnimationSettings getAnimationSettingsOf( Agent ao ) {
    return super.getAnimationSettingsOf( ao );
  }


  public String getNameOf( AgentList<?> aolist ) {
    return super.getNameOf( aolist );
  }
  
  public AgentAnimationSettings getAnimationSettingsOf( AgentList<?> aolist ) {
    return super.getAnimationSettingsOf( aolist );
  }


  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d1ofn1_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d1ofn1_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
1000 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D1ofD1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d1ofn1_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d1ofn2_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d1ofn2_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
1000 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D1ofD2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d1ofn2_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno7_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno7_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe7 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno7_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno6_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno6_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe6 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno6_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno24_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno24_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe24 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno24_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno18_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno18_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe18 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno18_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_InputDivider1_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_InputDivider1_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = self._selectOutput1_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_InputDivider1_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_Bifer1_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Bifer1_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Bifer1_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Gate1_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Gate1_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Gate1_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
100 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Gate1_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_bifer_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_bifer_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = self._selectOutput1_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_bifer_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno17_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno17_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe17 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno17_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno22_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno22_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe22 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno22_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Fic_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Fic_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Fic_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Fic_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidDispose instantiate_Dispose_xjal() {
    com.anylogic.libraries.fluid.FluidDispose _result_xjal = new com.anylogic.libraries.fluid.FluidDispose( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Dispose_xjal( final com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Dispose_xjal( com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d2ofn1_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d2ofn1_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D2ofD1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d2ofn1_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d2ofn2_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d2ofn2_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D2ofD2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d2ofn2_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno5_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno5_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe5 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno5_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno4_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno4_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe4 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno4_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_Bifer2_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Bifer2_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Bifer2_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Gate2_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Gate2_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Gate2_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
100 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank3 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Gate2_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_InputDivider2_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_InputDivider2_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = 
false 
;
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_InputDivider2_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno25_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno25_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe25 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno25_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno16_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno16_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe16 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno16_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno30_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno30_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe30 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno30_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_bifer1_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_bifer1_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = self._selectOutput1_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_bifer1_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno15_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno15_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe15 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno15_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno21_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno21_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe21 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno21_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno14_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno14_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe14 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno14_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno29_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno29_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe29 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno29_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d3ofn1_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d3ofn1_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D3ofD1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d3ofn1_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d3ofn2_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d3ofn2_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
1000 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D3ofD2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d3ofn2_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno3_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno3_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe3 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno3_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno2_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno2_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno2_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_Bifer3_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Bifer3_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Bifer3_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Gate3_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Gate3_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Gate3_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
100 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank4 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Gate3_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_InputDivider3_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_InputDivider3_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = 
false 
;
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_InputDivider3_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno26_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno26_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe26 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno26_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno13_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno13_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe13 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno13_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_bifer2_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_bifer2_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = self._selectOutput1_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_bifer2_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno12_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno12_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe12 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno12_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno20_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno20_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe20 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno20_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno11_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno11_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe11 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno11_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d4ofn1_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d4ofn1_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
1000 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D4ofD1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d4ofn1_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSource instantiate_d4ofn2_xjal() {
    com.anylogic.libraries.fluid.FluidSource _result_xjal = new com.anylogic.libraries.fluid.FluidSource( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_rate() {
        return LITER_PER_SECOND;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_d4ofn2_xjal( final com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.rate = 
10 
;
    self.rate = LITER_PER_SECOND.convertTo( self.rate, CUBIC_METER_PER_SECOND );
    self.infiniteCapacity = 
false 
;
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.modeBatchCustom = self._modeBatchCustom_DefaultValue_xjal();
    self.customBatch = self._customBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.storageTank = 
D4ofD2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_d4ofn2_xjal( com.anylogic.libraries.fluid.FluidSource self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno0_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno0_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe1 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno0_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno1_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno1_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno1_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_Bifer4_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Bifer4_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = 
self.SPLITMERGE_PRIORITY 
;
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Bifer4_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Gate4_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Gate4_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Gate4_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
100 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank5 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Gate4_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_InputDivider4_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_InputDivider4_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = 
false 
;
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_InputDivider4_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno28_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno28_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe28 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno28_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidSelectOutput instantiate_bifer3_xjal() {
    com.anylogic.libraries.fluid.FluidSelectOutput _result_xjal = new com.anylogic.libraries.fluid.FluidSelectOutput( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_bifer3_xjal( final com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
    self.selectOnCondition = self._selectOnCondition_DefaultValue_xjal();
    self.selectOutput1 = 
false 
;
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_bifer3_xjal( com.anylogic.libraries.fluid.FluidSelectOutput self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno10_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno10_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe10 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno10_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno19_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno19_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe19 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno19_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno27_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno27_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe27 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno27_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno8_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno8_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe8 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno8_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.Pipeline instantiate_pipeno9_xjal() {
    com.anylogic.libraries.fluid.Pipeline _result_xjal = new com.anylogic.libraries.fluid.Pipeline( getEngine(), this, null ) {

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_initialAmount() {
        return LITER;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_pipeno9_xjal( final com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
    self.capacity = 
100 
;
    self.capacity = LITER.convertTo( self.capacity, CUBIC_METER );
    self.initialAmount = 
0 
;
    self.initialAmount = LITER.convertTo( self.initialAmount, CUBIC_METER );
    self.limitRate = self._limitRate_DefaultValue_xjal();
    self.maxRate = self._maxRate_DefaultValue_xjal();
    self.customPriority = self._customPriority_DefaultValue_xjal();
    self.priorityOutCustom = self._priorityOutCustom_DefaultValue_xjal();
    self.customInitialBatch = self._customInitialBatch_DefaultValue_xjal();
    self.initialBatch = self._initialBatch_DefaultValue_xjal();
    self.customInitialBatchColor = self._customInitialBatchColor_DefaultValue_xjal();
    self.pipe = 
pipe9 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_pipeno9_xjal( com.anylogic.libraries.fluid.Pipeline self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidDispose instantiate_Dispose1_xjal() {
    com.anylogic.libraries.fluid.FluidDispose _result_xjal = new com.anylogic.libraries.fluid.FluidDispose( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Dispose1_xjal( final com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Dispose1_xjal( com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidDispose instantiate_Dispose2_xjal() {
    com.anylogic.libraries.fluid.FluidDispose _result_xjal = new com.anylogic.libraries.fluid.FluidDispose( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Dispose2_xjal( final com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Dispose2_xjal( com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidDispose instantiate_Dispose3_xjal() {
    com.anylogic.libraries.fluid.FluidDispose _result_xjal = new com.anylogic.libraries.fluid.FluidDispose( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Dispose3_xjal( final com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Dispose3_xjal( com.anylogic.libraries.fluid.FluidDispose self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_siphon1_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _siphon1_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_siphon1_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
10 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank2 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_siphon1_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op2_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op2_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op2_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op3_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op3_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op3_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_siphon2_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _siphon2_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_siphon2_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
10 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank7 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_siphon2_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op4_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op4_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op4_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_siphon3_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _siphon3_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_siphon3_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
10 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank6 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_siphon3_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op5_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op5_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op5_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.FluidMerge instantiate_op6_xjal() {
    com.anylogic.libraries.fluid.FluidMerge _result_xjal = new com.anylogic.libraries.fluid.FluidMerge( getEngine(), this, null );
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_op6_xjal( final com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
    self.mode = self._mode_DefaultValue_xjal();
    self.fraction1 = self._fraction1_DefaultValue_xjal();
    self.fraction2 = self._fraction2_DefaultValue_xjal();
    self.customPriorities = self._customPriorities_DefaultValue_xjal();
    self.priorityInput1 = self._priorityInput1_DefaultValue_xjal();
    self.priorityInput1Custom = self._priorityInput1Custom_DefaultValue_xjal();
    self.priorityInput2Custom = self._priorityInput2Custom_DefaultValue_xjal();
    self.modeBatch = self._modeBatch_DefaultValue_xjal();
    self.customBatchColor = self._customBatchColor_DefaultValue_xjal();
    self.limitRateOut = self._limitRateOut_DefaultValue_xjal();
    self.maxRateOut = self._maxRateOut_DefaultValue_xjal();
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_op6_xjal( com.anylogic.libraries.fluid.FluidMerge self, TableInput _t ) {
  }
  /**
   * Creates an embedded object instance<br>
   * <i>This method should not be called by user</i>
   */
  protected com.anylogic.libraries.fluid.ProcessTank instantiate_Sic_xjal() {
    com.anylogic.libraries.fluid.ProcessTank _result_xjal = new com.anylogic.libraries.fluid.ProcessTank( getEngine(), this, null ) {
      @Override
      public double capacity(  ) {
        return _Sic_capacity_xjal( this );
      }

      @AnyLogicInternalCodegenAPI
      public AmountUnits getUnitsForCodeOf_capacity() {
        return LITER;
      }

      @AnyLogicInternalCodegenAPI
      public FlowRateUnits getUnitsForCodeOf_maxRateOut() {
        return LITER_PER_SECOND;
      }
	};
    
    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_Sic_xjal( final com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
    self.delayTime = self._delayTime_DefaultValue_xjal();
    self.limitRateOut = 
true 
;
    self.maxRateOut = 
100 
;
    self.maxRateOut = LITER_PER_SECOND.convertTo( self.maxRateOut, CUBIC_METER_PER_SECOND );
    self.modeOutputBatch = self._modeOutputBatch_DefaultValue_xjal();
    self.customOutputBatchColor = self._customOutputBatchColor_DefaultValue_xjal();
    self.storageTank = 
storageTank8 
;
    self.showBatchesInFlowchart = self._showBatchesInFlowchart_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_Sic_xjal( com.anylogic.libraries.fluid.ProcessTank self, TableInput _t ) {
  }

  private double _Gate1_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _Fic_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
1000 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _Gate2_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _Gate3_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _Gate4_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _siphon1_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _siphon2_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _siphon3_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
500 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  private double _Sic_capacity_xjal( final com.anylogic.libraries.fluid.ProcessTank self ) {
    double _value;
    _value = 
3000 
;
    _value = LITER.convertTo( _value, CUBIC_METER );
    return _value;
  }
  // View areas
  public ViewArea _origin_VA = new ViewArea( this, "[Origin]", 0, 0, 1430.0, 2000.0 );
  @Override
  @AnyLogicInternalCodegenAPI
  public int getViewAreas(Map<String, ViewArea> _output) {
    if ( _output != null ) {
      _output.put( "_origin_VA", this._origin_VA );
    }
    return 1 + super.getViewAreas( _output );
  }
  protected static final Color _D4ofD2_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D4ofD1_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe1_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D3ofD2_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D3ofD1_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe2_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe3_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D2ofD2_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D2ofD1_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe4_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe5_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D1ofD2_Line_Color = new Color( 0x40404040, true );
  protected static final Color _D1ofD1_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe6_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe7_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe8_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe9_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe10_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe11_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe12_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe13_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe14_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe15_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe16_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe17_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe18_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe19_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe20_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe21_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe22_Line_Color = new Color( 0x40404040, true );
  protected static final Color _pipe24_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank1_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank2_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe25_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank3_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe26_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe27_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank4_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank5_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe28_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank6_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank7_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _storageTank8_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe29_Line_Color = new Color( 0x40FFFFFF, true );
  protected static final Color _pipe30_Line_Color = new Color( 0x40FFFFFF, true );
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle = 1;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle1 = 2;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle2 = 3;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle3 = 4;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle4 = 5;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle5 = 6;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle6 = 7;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle7 = 8;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle8 = 9;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle9 = 10;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle10 = 11;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle11 = 12;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle12 = 13;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle13 = 14;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle14 = 15;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle15 = 16;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle16 = 17;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle17 = 18;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle18 = 19;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle19 = 20;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle20 = 21;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle21 = 22;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle22 = 23;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle23 = 24;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle24 = 25;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle25 = 26;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle26 = 27;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle27 = 28;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle28 = 29;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle29 = 30;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle30 = 31;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle31 = 32;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle32 = 33;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle33 = 34;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle34 = 35;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle35 = 36;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle36 = 37;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle37 = 38;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle38 = 39;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle39 = 40;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle40 = 41;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle41 = 42;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle42 = 43;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle43 = 44;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle44 = 45;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle45 = 46;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle46 = 47;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle47 = 48;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle48 = 49;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle49 = 50;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle52 = 51;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle55 = 52;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle50 = 53;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle56 = 54;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle53 = 55;
  @AnyLogicInternalCodegenAPI
  protected static final int _rectangle51 = 56;
  @AnyLogicInternalCodegenAPI
  protected static final int _D4ofD2 = 57;
  @AnyLogicInternalCodegenAPI
  protected static final int _D4ofD1 = 58;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe = 59;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe1 = 60;
  @AnyLogicInternalCodegenAPI
  protected static final int _D3ofD2 = 61;
  @AnyLogicInternalCodegenAPI
  protected static final int _D3ofD1 = 62;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe2 = 63;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe3 = 64;
  @AnyLogicInternalCodegenAPI
  protected static final int _D2ofD2 = 65;
  @AnyLogicInternalCodegenAPI
  protected static final int _D2ofD1 = 66;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe4 = 67;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe5 = 68;
  @AnyLogicInternalCodegenAPI
  protected static final int _D1ofD2 = 69;
  @AnyLogicInternalCodegenAPI
  protected static final int _D1ofD1 = 70;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe6 = 71;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe7 = 72;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe8 = 73;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe9 = 74;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe10 = 75;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe11 = 76;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe12 = 77;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe13 = 78;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe14 = 79;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe15 = 80;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe16 = 81;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe17 = 82;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe18 = 83;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe19 = 84;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe20 = 85;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe21 = 86;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe22 = 87;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe24 = 88;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank = 89;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank1 = 90;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank2 = 91;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe25 = 92;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank3 = 93;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe26 = 94;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe27 = 95;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank4 = 96;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank5 = 97;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe28 = 98;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank6 = 99;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank7 = 100;
  @AnyLogicInternalCodegenAPI
  protected static final int _storageTank8 = 101;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe29 = 102;
  @AnyLogicInternalCodegenAPI
  protected static final int _pipe30 = 103;

  /** Internal constant, shouldn't be accessed by user */
  @AnyLogicInternalCodegenAPI
  protected static final int _SHAPE_NEXT_ID_xjal = 104;

  @AnyLogicInternalCodegenAPI
  public boolean isPublicPresentationDefined() {
    return true;
  }

  @AnyLogicInternalCodegenAPI
  public boolean isEmbeddedAgentPresentationVisible( Agent _a ) {
    return super.isEmbeddedAgentPresentationVisible( _a );
  }
  @AnyLogicInternalCodegenAPI
  private void _initialize_level_xjal() {
	  level.addAll(rectangle, rectangle1, rectangle2, rectangle3, rectangle4, rectangle5, rectangle6, rectangle7, rectangle8, rectangle9, rectangle10, rectangle11, rectangle12, rectangle13, rectangle14, rectangle15, rectangle16, rectangle17, rectangle18, rectangle19, rectangle20, rectangle21, rectangle22, rectangle23, rectangle24, rectangle25, rectangle26, rectangle27, rectangle28, rectangle29, rectangle30, rectangle31, rectangle32, rectangle33, rectangle34, rectangle35, rectangle36, rectangle37, rectangle38, rectangle39, rectangle40, rectangle41, rectangle42, rectangle43, rectangle44, rectangle45, rectangle46, rectangle47, rectangle48, rectangle49, rectangle52, rectangle55, rectangle50, rectangle56, rectangle53, D4ofD2, D4ofD1, pipe, pipe1, D3ofD2, D3ofD1, pipe2, pipe3, D2ofD2, D2ofD1, pipe4, pipe5, D1ofD2, D1ofD1, pipe6, pipe7, pipe8, pipe9, pipe10, pipe11, pipe12, pipe13, pipe14, pipe15, pipe16, pipe17, pipe18, pipe19, pipe20, pipe21, pipe22, rectangle51, pipe24, storageTank, storageTank1, storageTank2, pipe25, storageTank3, pipe26, pipe27, storageTank4, storageTank5, pipe28, storageTank6, storageTank7, storageTank8, pipe29, pipe30);
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			170.0, 90.106, 0.0,
			170.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe1_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			250.0, 90.106, 0.0,
			250.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe2_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			480.0, 90.104, 0.0,
			480.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe3_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			560.0, 90.104, 0.0,
			560.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe4_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			800.0, 100.104, 0.0,
			800.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe5_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			880.0, 100.104, 0.0,
			880.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe6_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1100.0, 100.104, 0.0,
			1100.0, 190.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe7_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1180.0, 100.104, 10.0,
			1180.0, 190.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe8_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			80.0, 430.0, 10.0,
			80.0, 735.9739999999999, 10.0
		),	      
		new MarkupSegmentLine
		(
			80.0, 735.9739999999999, 10.0,
			80.0, 1660.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe9_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			260.0, 430.0, 10.0,
			260.0, 1116.9650000000001, 10.0
		),	      
		new MarkupSegmentLine
		(
			260.0, 1116.9650000000001, 10.0,
			260.0, 1230.0, 10.0
		),	      
		new MarkupSegmentLine
		(
			260.0, 1230.0, 10.0,
			420.0, 1230.0, 10.0
		),	      
		new MarkupSegmentLine
		(
			420.0, 1230.0, 10.0,
			420.0, 1280.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe10_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			320.0, 1510.0, 10.0,
			320.0, 1618.271, 10.0
		),	      
		new MarkupSegmentLine
		(
			320.0, 1618.271, 10.0,
			230.0, 1618.271, 10.0
		),	      
		new MarkupSegmentLine
		(
			230.0, 1618.271, 10.0,
			230.0, 1660.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe11_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			390.0, 430.0, 10.0,
			390.0, 776.078, 10.0
		),	      
		new MarkupSegmentLine
		(
			390.0, 776.078, 10.0,
			390.0, 1187.149, 10.0
		),	      
		new MarkupSegmentLine
		(
			390.0, 1187.149, 10.0,
			460.0, 1187.149, 10.0
		),	      
		new MarkupSegmentLine
		(
			460.0, 1187.149, 10.0,
			460.0, 1280.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe12_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			580.0, 1090.0, 10.0,
			580.0, 1217.227, 10.0
		),	      
		new MarkupSegmentLine
		(
			580.0, 1217.227, 10.0,
			500.0, 1217.227, 10.0
		),	      
		new MarkupSegmentLine
		(
			500.0, 1217.227, 10.0,
			500.0, 1280.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe13_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			570.0, 430.0, 10.0,
			570.0, 816.183, 10.0
		),	      
		new MarkupSegmentLine
		(
			570.0, 816.183, 10.0,
			660.0, 816.183, 10.0
		),	      
		new MarkupSegmentLine
		(
			660.0, 816.183, 10.0,
			660.0, 870.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe14_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			710.0, 430.0, 10.0,
			710.0, 870.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe15_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			790.0, 760.0, 10.0,
			790.0, 816.183, 10.0
		),	      
		new MarkupSegmentLine
		(
			790.0, 816.183, 10.0,
			750.0, 816.183, 10.0
		),	      
		new MarkupSegmentLine
		(
			750.0, 816.183, 10.0,
			750.0, 870.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe16_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			890.0, 430.0, 10.0,
			890.0, 540.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe17_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1020.0, 430.0, 10.0,
			1020.0, 485.321, 10.0
		),	      
		new MarkupSegmentLine
		(
			1020.0, 485.321, 10.0,
			950.0, 485.321, 10.0
		),	      
		new MarkupSegmentLine
		(
			950.0, 485.321, 10.0,
			950.0, 540.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe18_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1200.0, 430.0, 10.0,
			1200.0, 520.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe19_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			320.0, 1510.0, 10.0,
			320.0, 1628.297, 10.0
		),	      
		new MarkupSegmentLine
		(
			320.0, 1628.297, 10.0,
			370.0, 1628.297, 10.0
		),	      
		new MarkupSegmentLine
		(
			370.0, 1628.297, 10.0,
			370.0, 1708.506, 10.0
		),	      
		new MarkupSegmentLine
		(
			370.0, 1708.506, 10.0,
			370.0, 1900.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe20_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			580.0, 1090.0, 10.0,
			580.0, 1217.227, 10.0
		),	      
		new MarkupSegmentLine
		(
			580.0, 1217.227, 10.0,
			630.0, 1217.227, 10.0
		),	      
		new MarkupSegmentLine
		(
			630.0, 1217.227, 10.0,
			630.0, 1900.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe21_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			790.0, 760.0, 10.0,
			790.0, 826.208, 10.0
		),	      
		new MarkupSegmentLine
		(
			790.0, 826.208, 10.0,
			840.0, 826.208, 10.0
		),	      
		new MarkupSegmentLine
		(
			840.0, 826.208, 10.0,
			840.0, 896.391, 10.0
		),	      
		new MarkupSegmentLine
		(
			840.0, 896.391, 10.0,
			840.0, 1900.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe22_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1020.0, 430.0, 10.0,
			1020.0, 467.242, 10.0
		),	      
		new MarkupSegmentLine
		(
			1020.0, 467.242, 10.0,
			1020.0, 485.32, 10.0
		),	      
		new MarkupSegmentLine
		(
			1020.0, 485.32, 10.0,
			1050.0, 485.32, 10.0
		),	      
		new MarkupSegmentLine
		(
			1050.0, 485.32, 10.0,
			1050.0, 585.582, 10.0
		),	      
		new MarkupSegmentLine
		(
			1050.0, 585.582, 10.0,
			1050.0, 1900.0, 10.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe24_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			1095.0, 410.0, 0.0,
			1055.0, 410.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			1055.0, 410.0, 0.0,
			1055.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			1055.0, 225.0, 0.0,
			1017.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			1017.0, 225.0, 0.0,
			1017.0, 430.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe25_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			785.0, 410.0, 0.0,
			745.0, 410.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			745.0, 410.0, 0.0,
			745.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			745.0, 225.0, 0.0,
			707.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			707.0, 225.0, 0.0,
			707.0, 430.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe26_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			465.0, 410.0, 0.0,
			425.0, 410.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			425.0, 410.0, 0.0,
			425.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			425.0, 225.0, 0.0,
			387.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			387.0, 225.0, 0.0,
			387.0, 430.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe27_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			155.0, 410.0, 0.0,
			115.0, 410.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			115.0, 410.0, 0.0,
			115.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			115.0, 225.0, 0.0,
			77.0, 225.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			77.0, 225.0, 0.0,
			77.0, 430.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe28_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			395.0, 1490.0, 0.0,
			355.0, 1490.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			355.0, 1490.0, 0.0,
			355.0, 1305.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			355.0, 1305.0, 0.0,
			317.0, 1305.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			317.0, 1305.0, 0.0,
			317.0, 1510.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe29_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			655.0, 1070.0, 0.0,
			615.0, 1070.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			615.0, 1070.0, 0.0,
			615.0, 925.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			615.0, 925.0, 0.0,
			580.0, 925.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			580.0, 925.0, 0.0,
			580.0, 1085.0, 0.0
		),				
	};
  }
	@AnyLogicInternalCodegenAPI
	private static MarkupSegment[] _pipe30_segments_xjal() {
	  return new MarkupSegment[] {      
		new MarkupSegmentLine
		(
			865.0, 740.0, 0.0,
			825.0, 740.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			825.0, 740.0, 0.0,
			825.0, 595.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			825.0, 595.0, 0.0,
			790.0, 595.0, 0.0
		),	      
		new MarkupSegmentLine
		(
			790.0, 595.0, 0.0,
			790.0, 755.0, 0.0
		),				
	};
  }

  protected ShapeRectangle rectangle;
  protected ShapeRectangle rectangle1;
  protected ShapeRectangle rectangle2;
  protected ShapeRectangle rectangle3;
  protected ShapeRectangle rectangle4;
  protected ShapeRectangle rectangle5;
  protected ShapeRectangle rectangle6;
  protected ShapeRectangle rectangle7;
  protected ShapeRectangle rectangle8;
  protected ShapeRectangle rectangle9;
  protected ShapeRectangle rectangle10;
  protected ShapeRectangle rectangle11;
  protected ShapeRectangle rectangle12;
  protected ShapeRectangle rectangle13;
  protected ShapeRectangle rectangle14;
  protected ShapeRectangle rectangle15;
  protected ShapeRectangle rectangle16;
  protected ShapeRectangle rectangle17;
  protected ShapeRectangle rectangle18;
  protected ShapeRectangle rectangle19;
  protected ShapeRectangle rectangle20;
  protected ShapeRectangle rectangle21;
  protected ShapeRectangle rectangle22;
  protected ShapeRectangle rectangle23;
  protected ShapeRectangle rectangle24;
  protected ShapeRectangle rectangle25;
  protected ShapeRectangle rectangle26;
  protected ShapeRectangle rectangle27;
  protected ShapeRectangle rectangle28;
  protected ShapeRectangle rectangle29;
  protected ShapeRectangle rectangle30;
  protected ShapeRectangle rectangle31;
  protected ShapeRectangle rectangle32;
  protected ShapeRectangle rectangle33;
  protected ShapeRectangle rectangle34;
  protected ShapeRectangle rectangle35;
  protected ShapeRectangle rectangle36;
  protected ShapeRectangle rectangle37;
  protected ShapeRectangle rectangle38;
  protected ShapeRectangle rectangle39;
  protected ShapeRectangle rectangle40;
  protected ShapeRectangle rectangle41;
  protected ShapeRectangle rectangle42;
  protected ShapeRectangle rectangle43;
  protected ShapeRectangle rectangle44;
  protected ShapeRectangle rectangle45;
  protected ShapeRectangle rectangle46;
  protected ShapeRectangle rectangle47;
  protected ShapeRectangle rectangle48;
  protected ShapeRectangle rectangle49;
  protected ShapeRectangle rectangle52;
  protected ShapeRectangle rectangle55;
  protected ShapeRectangle rectangle50;
  protected ShapeRectangle rectangle56;
  protected ShapeRectangle rectangle53;
  protected ShapeRectangle rectangle51;
  protected StorageTank D4ofD2;
  protected StorageTank D4ofD1;
  protected Pipe pipe;
  protected Pipe pipe1;
  protected StorageTank D3ofD2;
  protected StorageTank D3ofD1;
  protected Pipe pipe2;
  protected Pipe pipe3;
  protected StorageTank D2ofD2;
  protected StorageTank D2ofD1;
  protected Pipe pipe4;
  protected Pipe pipe5;
  protected StorageTank D1ofD2;
  protected StorageTank D1ofD1;
  protected Pipe pipe6;
  protected Pipe pipe7;
  protected Pipe pipe8;
  protected Pipe pipe9;
  protected Pipe pipe10;
  protected Pipe pipe11;
  protected Pipe pipe12;
  protected Pipe pipe13;
  protected Pipe pipe14;
  protected Pipe pipe15;
  protected Pipe pipe16;
  protected Pipe pipe17;
  protected Pipe pipe18;
  protected Pipe pipe19;
  protected Pipe pipe20;
  protected Pipe pipe21;
  protected Pipe pipe22;
  protected Pipe pipe24;
  protected StorageTank storageTank;
  protected StorageTank storageTank1;
  protected StorageTank storageTank2;
  protected Pipe pipe25;
  protected StorageTank storageTank3;
  protected Pipe pipe26;
  protected Pipe pipe27;
  protected StorageTank storageTank4;
  protected StorageTank storageTank5;
  protected Pipe pipe28;
  protected StorageTank storageTank6;
  protected StorageTank storageTank7;
  protected StorageTank storageTank8;
  protected Pipe pipe29;
  protected Pipe pipe30;
  protected com.anylogic.engine.markup.Level level;

  private com.anylogic.engine.markup.Level[] _getLevels_xjal;

  @Override
  public com.anylogic.engine.markup.Level[] getLevels() {
    return _getLevels_xjal;
  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsBP0_xjal() {
    rectangle = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,50.0, 194.564, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle1 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,50.0, 194.564, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle2 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,123.846, 194.564, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 201.3938096236748, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle3 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,86.923, 242.515, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 191.80362821302361, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle4 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,86.923, 415.138, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle5 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,160.769, 405.547, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle6 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,280.769, 194.564, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle7 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,590.846, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle8 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,397.0, 242.558, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 191.80362821302361, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle9 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,397.0, 415.182, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle10 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,470.846, 405.591, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle11 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,360.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle12 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,360.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle13 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,433.923, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 201.3938096236748, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle14 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,910.846, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle15 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,717.0, 242.558, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 191.80362821302361, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle16 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,717.0, 415.182, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle17 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,790.846, 405.591, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle18 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,680.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle19 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,680.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle20 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,753.923, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 201.3938096236748, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle21 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1220.846, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle22 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1027.0, 242.558, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 191.80362821302361, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle23 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1027.0, 415.182, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle24 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1100.846, 405.591, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle25 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,990.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle26 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,990.077, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle27 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1063.923, 194.607, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 201.3938096236748, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle28 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,660.769, 1067.27, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle29 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,623.846, 896.392, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 161.2898505510158, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle30 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,586.923, 936.496, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 159.54530936895094, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle31 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,550.0, 896.392, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle32 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,780.769, 856.287, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle33 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,550.0, 856.287, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle34 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,586.923, 1076.861, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle35 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,796.923, 605.634, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 159.54530936895094, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle36 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,760.0, 525.426, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle37 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,796.923, 746.0, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle38 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,870.769, 736.409, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle39 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,760.0, 565.53, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle40 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,990.769, 525.426, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle41 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,833.846, 565.53, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 161.2898505510158, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle42 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,326.923, 1497.957, 0.0, 0.0, 
            darkOrange, darkOrange,
			212.30769230769232, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle43 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,363.846, 1277.383, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 201.3938096236748, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle44 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,400.769, 1488.366, 0.0, 0.0, 
            darkOrange, darkOrange,
			138.46153846153848, 28.770544231953536, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle45 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,520.769, 1277.383, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle46 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,290.0, 1277.383, 0.0, 0.0, 
            darkOrange, darkOrange,
			92.3076923076923, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle47 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,326.923, 1325.334, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 191.80362821302361, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle48 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,290.0, 1277.383, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle49 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,30.0, 1868.923, 0.0, 0.0, 
            darkOrange, darkOrange,
			249.231, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle52 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,260.769, 1648.349, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle55 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,30.0, 1648.349, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle50 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1120.0, 746.0, 0.0, 0.0, 
            darkOrange, darkOrange,
			249.231, 19.180362821302356, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle56 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1120.0, 525.426, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle53 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,1350.769, 525.426, 0.0, 0.0, 
            darkOrange, darkOrange,
			18.461538461538463, 239.75453526627948, 10.0, 1.0, LINE_STYLE_SOLID );

    rectangle51 = new ShapeRectangle(
       SHAPE_DRAW_2D3D, true,0.0, 1909.027, 0.0, 0.0, 
            black, oldLace,
			1430.0, 50.1304937374948, 10.0, 1.0, LINE_STYLE_SOLID );

	D4ofD2 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			160.0, 50.0, 0.0,
			80.66805845511482, 100.0, _D4ofD2_Line_Color
			 );

	D4ofD1 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			250.0, 50.0, 0.0,
			80.66805845511482, 100.0, _D4ofD1_Line_Color
			 );

	pipe = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe_Line_Color, 
			_pipe_segments_xjal()
			 );

	pipe1 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe1_Line_Color, 
			_pipe1_segments_xjal()
			 );

	D3ofD2 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			470.0, 50.0, 0.0,
			80.66805845511482, 100.0, _D3ofD2_Line_Color
			 );

	D3ofD1 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			560.0, 50.0, 0.0,
			80.66805845511482, 100.0, _D3ofD1_Line_Color
			 );

	pipe2 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe2_Line_Color, 
			_pipe2_segments_xjal()
			 );

	pipe3 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe3_Line_Color, 
			_pipe3_segments_xjal()
			 );

	D2ofD2 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			790.0, 60.0, 0.0,
			80.66805845511482, 100.0, _D2ofD2_Line_Color
			 );

	D2ofD1 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			880.0, 60.0, 0.0,
			80.66805845511482, 100.0, _D2ofD1_Line_Color
			 );

	pipe4 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe4_Line_Color, 
			_pipe4_segments_xjal()
			 );

	pipe5 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe5_Line_Color, 
			_pipe5_segments_xjal()
			 );

	D1ofD2 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			1090.0, 60.0, 0.0,
			80.66805845511482, 100.0, _D1ofD2_Line_Color
			 );

	D1ofD1 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			1180.0, 60.0, 0.0,
			80.66805845511482, 100.0, _D1ofD1_Line_Color
			 );

	pipe6 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe6_Line_Color, 
			_pipe6_segments_xjal()
			 );

	pipe7 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe7_Line_Color, 
			_pipe7_segments_xjal()
			 );

	pipe8 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe8_Line_Color, 
			_pipe8_segments_xjal()
			 );

	pipe9 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe9_Line_Color, 
			_pipe9_segments_xjal()
			 );

	pipe10 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe10_Line_Color, 
			_pipe10_segments_xjal()
			 );

	pipe11 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe11_Line_Color, 
			_pipe11_segments_xjal()
			 );

	pipe12 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe12_Line_Color, 
			_pipe12_segments_xjal()
			 );

	pipe13 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe13_Line_Color, 
			_pipe13_segments_xjal()
			 );

	pipe14 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe14_Line_Color, 
			_pipe14_segments_xjal()
			 );

	pipe15 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe15_Line_Color, 
			_pipe15_segments_xjal()
			 );

	pipe16 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe16_Line_Color, 
			_pipe16_segments_xjal()
			 );

	pipe17 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe17_Line_Color, 
			_pipe17_segments_xjal()
			 );

	pipe18 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe18_Line_Color, 
			_pipe18_segments_xjal()
			 );

	pipe19 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe19_Line_Color, 
			_pipe19_segments_xjal()
			 );

	pipe20 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe20_Line_Color, 
			_pipe20_segments_xjal()
			 );

	pipe21 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe21_Line_Color, 
			_pipe21_segments_xjal()
			 );

	pipe22 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 20.0, _pipe22_Line_Color, 
			_pipe22_segments_xjal()
			 );

	pipe24 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe24_Line_Color, 
			_pipe24_segments_xjal()
			 );

	storageTank = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			1150.0, 300.0, 0.0,
			220.0, 100.0, _storageTank_Line_Color
			 );

	storageTank1 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			1245.0, 640.0, 0.0,
			210.0, 100.0, _storageTank1_Line_Color
			 );

	storageTank2 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			940.0, 660.0, 0.0,
			190.0, 100.0, _storageTank2_Line_Color
			 );

	pipe25 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe25_Line_Color, 
			_pipe25_segments_xjal()
			 );

	storageTank3 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			840.0, 300.0, 0.0,
			220.0, 100.0, _storageTank3_Line_Color
			 );

	pipe26 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe26_Line_Color, 
			_pipe26_segments_xjal()
			 );

	pipe27 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe27_Line_Color, 
			_pipe27_segments_xjal()
			 );

	storageTank4 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			520.0, 300.0, 0.0,
			220.0, 100.0, _storageTank4_Line_Color
			 );

	storageTank5 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			220.0, 300.0, 0.0,
			220.0, 100.0, _storageTank5_Line_Color
			 );

	pipe28 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe28_Line_Color, 
			_pipe28_segments_xjal()
			 );

	storageTank6 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			460.001, 1400.0, 0.0,
			200.0, 100.0, _storageTank6_Line_Color
			 );

  }
  
  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsBP1_xjal() {
	storageTank7 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			720.0, 980.0, 0.0,
			190.0, 100.0, _storageTank7_Line_Color
			 );

	storageTank8 = new StorageTank
	(
			this, SHAPE_DRAW_2D3D, true,
			155.0, 1760.0, 0.0,
			210.0, 100.0, _storageTank8_Line_Color
			 );

	pipe29 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe29_Line_Color, 
			_pipe29_segments_xjal()
			 );

	pipe30 = new Pipe
	(
			this, SHAPE_DRAW_2D3D, true, 10.0, _pipe30_Line_Color, 
			_pipe30_segments_xjal()
			 );

  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsAP0_xjal() {
  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsBS0_xjal() {
  }


  // Static initialization of persistent elements
  private void instantiatePersistentElements_xjal() {
    level = new com.anylogic.engine.markup.Level(this, "level", SHAPE_DRAW_2D3D, 0.0, true, true);  			
	_getLevels_xjal = new com.anylogic.engine.markup.Level[] { 
      level };
    _createPersistentElementsBP0_xjal();
    _createPersistentElementsBP1_xjal();
  }
  protected ShapeTopLevelPresentationGroup presentation;
  protected ShapeModelElementsGroup icon; 

  @Override
  @AnyLogicInternalCodegenAPI
  public ShapeTopLevelPresentationGroup getPresentationShape() {
    return presentation;
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public ShapeModelElementsGroup getModelElementsShape() {
    return icon;
  }

	


  /**
   * Constructor
   */
  public Main( Engine engine, Agent owner, AgentList<? extends Main> ownerPopulation ) {
    super( engine, owner, ownerPopulation );
    instantiateBaseStructureThis_xjal();
  }

  @AnyLogicInternalCodegenAPI
  public void onOwnerChanged_xjal() {
    super.onOwnerChanged_xjal();
    setupReferences_xjal();
  }

  @AnyLogicInternalCodegenAPI
  public void instantiateBaseStructure_xjal() {
    super.instantiateBaseStructure_xjal();
    instantiateBaseStructureThis_xjal();
  }
  
  @AnyLogicInternalCodegenAPI
  private void instantiateBaseStructureThis_xjal() {
    d1ofn1 = instantiate_d1ofn1_xjal();
    d1ofn2 = instantiate_d1ofn2_xjal();
    pipeno7 = instantiate_pipeno7_xjal();
    pipeno6 = instantiate_pipeno6_xjal();
    pipeno24 = instantiate_pipeno24_xjal();
    pipeno18 = instantiate_pipeno18_xjal();
    InputDivider1 = instantiate_InputDivider1_xjal();
    Bifer1 = instantiate_Bifer1_xjal();
    Gate1 = instantiate_Gate1_xjal();
    bifer = instantiate_bifer_xjal();
    pipeno17 = instantiate_pipeno17_xjal();
    pipeno22 = instantiate_pipeno22_xjal();
    Fic = instantiate_Fic_xjal();
    Dispose = instantiate_Dispose_xjal();
    d2ofn1 = instantiate_d2ofn1_xjal();
    d2ofn2 = instantiate_d2ofn2_xjal();
    pipeno5 = instantiate_pipeno5_xjal();
    pipeno4 = instantiate_pipeno4_xjal();
    Bifer2 = instantiate_Bifer2_xjal();
    Gate2 = instantiate_Gate2_xjal();
    InputDivider2 = instantiate_InputDivider2_xjal();
    pipeno25 = instantiate_pipeno25_xjal();
    pipeno16 = instantiate_pipeno16_xjal();
    pipeno30 = instantiate_pipeno30_xjal();
    bifer1 = instantiate_bifer1_xjal();
    pipeno15 = instantiate_pipeno15_xjal();
    pipeno21 = instantiate_pipeno21_xjal();
    pipeno14 = instantiate_pipeno14_xjal();
    pipeno29 = instantiate_pipeno29_xjal();
    d3ofn1 = instantiate_d3ofn1_xjal();
    d3ofn2 = instantiate_d3ofn2_xjal();
    pipeno3 = instantiate_pipeno3_xjal();
    pipeno2 = instantiate_pipeno2_xjal();
    Bifer3 = instantiate_Bifer3_xjal();
    Gate3 = instantiate_Gate3_xjal();
    InputDivider3 = instantiate_InputDivider3_xjal();
    pipeno26 = instantiate_pipeno26_xjal();
    pipeno13 = instantiate_pipeno13_xjal();
    bifer2 = instantiate_bifer2_xjal();
    pipeno12 = instantiate_pipeno12_xjal();
    pipeno20 = instantiate_pipeno20_xjal();
    pipeno11 = instantiate_pipeno11_xjal();
    d4ofn1 = instantiate_d4ofn1_xjal();
    d4ofn2 = instantiate_d4ofn2_xjal();
    pipeno0 = instantiate_pipeno0_xjal();
    pipeno1 = instantiate_pipeno1_xjal();
    Bifer4 = instantiate_Bifer4_xjal();
    Gate4 = instantiate_Gate4_xjal();
    InputDivider4 = instantiate_InputDivider4_xjal();
    pipeno28 = instantiate_pipeno28_xjal();
    bifer3 = instantiate_bifer3_xjal();
    pipeno10 = instantiate_pipeno10_xjal();
    pipeno19 = instantiate_pipeno19_xjal();
    pipeno27 = instantiate_pipeno27_xjal();
    pipeno8 = instantiate_pipeno8_xjal();
    pipeno9 = instantiate_pipeno9_xjal();
    Dispose1 = instantiate_Dispose1_xjal();
    Dispose2 = instantiate_Dispose2_xjal();
    Dispose3 = instantiate_Dispose3_xjal();
    op = instantiate_op_xjal();
    siphon1 = instantiate_siphon1_xjal();
    op2 = instantiate_op2_xjal();
    op3 = instantiate_op3_xjal();
    siphon2 = instantiate_siphon2_xjal();
    op4 = instantiate_op4_xjal();
    siphon3 = instantiate_siphon3_xjal();
    op5 = instantiate_op5_xjal();
    op6 = instantiate_op6_xjal();
    Sic = instantiate_Sic_xjal();
	instantiatePersistentElements_xjal();
    setupReferences_xjal();
  }
  
  @AnyLogicInternalCodegenAPI
  private void setupReferences_xjal() {
  }
  
  /**
   * Simple constructor. Please add created agent to some population by calling goToPopulation() function
   */
  public Main() {
  }
  
  /**
   * Creating embedded object instances
   */
  @AnyLogicInternalCodegenAPI
  private void instantiatePopulations_xjal() {
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public void doCreate() {
    super.doCreate();
    // Creating embedded object instances
    instantiatePopulations_xjal();
    // Assigning initial values for plain variables
    setupPlainVariables_Main_xjal();
    // Dynamic initialization of persistent elements
    _createPersistentElementsAP0_xjal();
	_initialize_level_xjal();
    level.initialize();
    presentation = new ShapeTopLevelPresentationGroup( Main.this, true, 0, 0, 0, 0 , level );
    // Creating embedded object instances
    instantiatePopulations_xjal();
    icon = new ShapeModelElementsGroup( Main.this, getElementProperty( "water_computer_layout.Main.icon", IElementDescriptor.MODEL_ELEMENT_DESCRIPTORS )  );
    icon.setIconOffsets( 0.0, 0.0 );
    // Creating non-replicated embedded objects
    setupParameters_d1ofn1_xjal( d1ofn1, null );
    doBeforeCreate_d1ofn1_xjal( d1ofn1, null );
    d1ofn1.createAsEmbedded();
    setupParameters_d1ofn2_xjal( d1ofn2, null );
    doBeforeCreate_d1ofn2_xjal( d1ofn2, null );
    d1ofn2.createAsEmbedded();
    setupParameters_pipeno7_xjal( pipeno7, null );
    doBeforeCreate_pipeno7_xjal( pipeno7, null );
    pipeno7.createAsEmbedded();
    setupParameters_pipeno6_xjal( pipeno6, null );
    doBeforeCreate_pipeno6_xjal( pipeno6, null );
    pipeno6.createAsEmbedded();
    setupParameters_pipeno24_xjal( pipeno24, null );
    doBeforeCreate_pipeno24_xjal( pipeno24, null );
    pipeno24.createAsEmbedded();
    setupParameters_pipeno18_xjal( pipeno18, null );
    doBeforeCreate_pipeno18_xjal( pipeno18, null );
    pipeno18.createAsEmbedded();
    setupParameters_InputDivider1_xjal( InputDivider1, null );
    doBeforeCreate_InputDivider1_xjal( InputDivider1, null );
    InputDivider1.createAsEmbedded();
    setupParameters_Bifer1_xjal( Bifer1, null );
    doBeforeCreate_Bifer1_xjal( Bifer1, null );
    Bifer1.createAsEmbedded();
    setupParameters_Gate1_xjal( Gate1, null );
    doBeforeCreate_Gate1_xjal( Gate1, null );
    Gate1.createAsEmbedded();
    setupParameters_bifer_xjal( bifer, null );
    doBeforeCreate_bifer_xjal( bifer, null );
    bifer.createAsEmbedded();
    setupParameters_pipeno17_xjal( pipeno17, null );
    doBeforeCreate_pipeno17_xjal( pipeno17, null );
    pipeno17.createAsEmbedded();
    setupParameters_pipeno22_xjal( pipeno22, null );
    doBeforeCreate_pipeno22_xjal( pipeno22, null );
    pipeno22.createAsEmbedded();
    setupParameters_Fic_xjal( Fic, null );
    doBeforeCreate_Fic_xjal( Fic, null );
    Fic.createAsEmbedded();
    setupParameters_Dispose_xjal( Dispose, null );
    doBeforeCreate_Dispose_xjal( Dispose, null );
    Dispose.createAsEmbedded();
    setupParameters_d2ofn1_xjal( d2ofn1, null );
    doBeforeCreate_d2ofn1_xjal( d2ofn1, null );
    d2ofn1.createAsEmbedded();
    setupParameters_d2ofn2_xjal( d2ofn2, null );
    doBeforeCreate_d2ofn2_xjal( d2ofn2, null );
    d2ofn2.createAsEmbedded();
    setupParameters_pipeno5_xjal( pipeno5, null );
    doBeforeCreate_pipeno5_xjal( pipeno5, null );
    pipeno5.createAsEmbedded();
    setupParameters_pipeno4_xjal( pipeno4, null );
    doBeforeCreate_pipeno4_xjal( pipeno4, null );
    pipeno4.createAsEmbedded();
    setupParameters_Bifer2_xjal( Bifer2, null );
    doBeforeCreate_Bifer2_xjal( Bifer2, null );
    Bifer2.createAsEmbedded();
    setupParameters_Gate2_xjal( Gate2, null );
    doBeforeCreate_Gate2_xjal( Gate2, null );
    Gate2.createAsEmbedded();
    setupParameters_InputDivider2_xjal( InputDivider2, null );
    doBeforeCreate_InputDivider2_xjal( InputDivider2, null );
    InputDivider2.createAsEmbedded();
    setupParameters_pipeno25_xjal( pipeno25, null );
    doBeforeCreate_pipeno25_xjal( pipeno25, null );
    pipeno25.createAsEmbedded();
    setupParameters_pipeno16_xjal( pipeno16, null );
    doBeforeCreate_pipeno16_xjal( pipeno16, null );
    pipeno16.createAsEmbedded();
    setupParameters_pipeno30_xjal( pipeno30, null );
    doBeforeCreate_pipeno30_xjal( pipeno30, null );
    pipeno30.createAsEmbedded();
    setupParameters_bifer1_xjal( bifer1, null );
    doBeforeCreate_bifer1_xjal( bifer1, null );
    bifer1.createAsEmbedded();
    setupParameters_pipeno15_xjal( pipeno15, null );
    doBeforeCreate_pipeno15_xjal( pipeno15, null );
    pipeno15.createAsEmbedded();
    setupParameters_pipeno21_xjal( pipeno21, null );
    doBeforeCreate_pipeno21_xjal( pipeno21, null );
    pipeno21.createAsEmbedded();
    setupParameters_pipeno14_xjal( pipeno14, null );
    doBeforeCreate_pipeno14_xjal( pipeno14, null );
    pipeno14.createAsEmbedded();
    setupParameters_pipeno29_xjal( pipeno29, null );
    doBeforeCreate_pipeno29_xjal( pipeno29, null );
    pipeno29.createAsEmbedded();
    setupParameters_d3ofn1_xjal( d3ofn1, null );
    doBeforeCreate_d3ofn1_xjal( d3ofn1, null );
    d3ofn1.createAsEmbedded();
    setupParameters_d3ofn2_xjal( d3ofn2, null );
    doBeforeCreate_d3ofn2_xjal( d3ofn2, null );
    d3ofn2.createAsEmbedded();
    setupParameters_pipeno3_xjal( pipeno3, null );
    doBeforeCreate_pipeno3_xjal( pipeno3, null );
    pipeno3.createAsEmbedded();
    setupParameters_pipeno2_xjal( pipeno2, null );
    doBeforeCreate_pipeno2_xjal( pipeno2, null );
    pipeno2.createAsEmbedded();
    setupParameters_Bifer3_xjal( Bifer3, null );
    doBeforeCreate_Bifer3_xjal( Bifer3, null );
    Bifer3.createAsEmbedded();
    setupParameters_Gate3_xjal( Gate3, null );
    doBeforeCreate_Gate3_xjal( Gate3, null );
    Gate3.createAsEmbedded();
    setupParameters_InputDivider3_xjal( InputDivider3, null );
    doBeforeCreate_InputDivider3_xjal( InputDivider3, null );
    InputDivider3.createAsEmbedded();
    setupParameters_pipeno26_xjal( pipeno26, null );
    doBeforeCreate_pipeno26_xjal( pipeno26, null );
    pipeno26.createAsEmbedded();
    setupParameters_pipeno13_xjal( pipeno13, null );
    doBeforeCreate_pipeno13_xjal( pipeno13, null );
    pipeno13.createAsEmbedded();
    setupParameters_bifer2_xjal( bifer2, null );
    doBeforeCreate_bifer2_xjal( bifer2, null );
    bifer2.createAsEmbedded();
    setupParameters_pipeno12_xjal( pipeno12, null );
    doBeforeCreate_pipeno12_xjal( pipeno12, null );
    pipeno12.createAsEmbedded();
    setupParameters_pipeno20_xjal( pipeno20, null );
    doBeforeCreate_pipeno20_xjal( pipeno20, null );
    pipeno20.createAsEmbedded();
    setupParameters_pipeno11_xjal( pipeno11, null );
    doBeforeCreate_pipeno11_xjal( pipeno11, null );
    pipeno11.createAsEmbedded();
    setupParameters_d4ofn1_xjal( d4ofn1, null );
    doBeforeCreate_d4ofn1_xjal( d4ofn1, null );
    d4ofn1.createAsEmbedded();
    setupParameters_d4ofn2_xjal( d4ofn2, null );
    doBeforeCreate_d4ofn2_xjal( d4ofn2, null );
    d4ofn2.createAsEmbedded();
    setupParameters_pipeno0_xjal( pipeno0, null );
    doBeforeCreate_pipeno0_xjal( pipeno0, null );
    pipeno0.createAsEmbedded();
    setupParameters_pipeno1_xjal( pipeno1, null );
    doBeforeCreate_pipeno1_xjal( pipeno1, null );
    pipeno1.createAsEmbedded();
    setupParameters_Bifer4_xjal( Bifer4, null );
    doBeforeCreate_Bifer4_xjal( Bifer4, null );
    Bifer4.createAsEmbedded();
    setupParameters_Gate4_xjal( Gate4, null );
    doBeforeCreate_Gate4_xjal( Gate4, null );
    Gate4.createAsEmbedded();
    setupParameters_InputDivider4_xjal( InputDivider4, null );
    doBeforeCreate_InputDivider4_xjal( InputDivider4, null );
    InputDivider4.createAsEmbedded();
    setupParameters_pipeno28_xjal( pipeno28, null );
    doBeforeCreate_pipeno28_xjal( pipeno28, null );
    pipeno28.createAsEmbedded();
    setupParameters_bifer3_xjal( bifer3, null );
    doBeforeCreate_bifer3_xjal( bifer3, null );
    bifer3.createAsEmbedded();
    setupParameters_pipeno10_xjal( pipeno10, null );
    doBeforeCreate_pipeno10_xjal( pipeno10, null );
    pipeno10.createAsEmbedded();
    setupParameters_pipeno19_xjal( pipeno19, null );
    doBeforeCreate_pipeno19_xjal( pipeno19, null );
    pipeno19.createAsEmbedded();
    setupParameters_pipeno27_xjal( pipeno27, null );
    doBeforeCreate_pipeno27_xjal( pipeno27, null );
    pipeno27.createAsEmbedded();
    setupParameters_pipeno8_xjal( pipeno8, null );
    doBeforeCreate_pipeno8_xjal( pipeno8, null );
    pipeno8.createAsEmbedded();
    setupParameters_pipeno9_xjal( pipeno9, null );
    doBeforeCreate_pipeno9_xjal( pipeno9, null );
    pipeno9.createAsEmbedded();
    setupParameters_Dispose1_xjal( Dispose1, null );
    doBeforeCreate_Dispose1_xjal( Dispose1, null );
    Dispose1.createAsEmbedded();
    setupParameters_Dispose2_xjal( Dispose2, null );
    doBeforeCreate_Dispose2_xjal( Dispose2, null );
    Dispose2.createAsEmbedded();
    setupParameters_Dispose3_xjal( Dispose3, null );
    doBeforeCreate_Dispose3_xjal( Dispose3, null );
    Dispose3.createAsEmbedded();
    setupParameters_op_xjal( op, null );
    doBeforeCreate_op_xjal( op, null );
    op.createAsEmbedded();
    setupParameters_siphon1_xjal( siphon1, null );
    doBeforeCreate_siphon1_xjal( siphon1, null );
    siphon1.createAsEmbedded();
    setupParameters_op2_xjal( op2, null );
    doBeforeCreate_op2_xjal( op2, null );
    op2.createAsEmbedded();
    setupParameters_op3_xjal( op3, null );
    doBeforeCreate_op3_xjal( op3, null );
    op3.createAsEmbedded();
    setupParameters_siphon2_xjal( siphon2, null );
    doBeforeCreate_siphon2_xjal( siphon2, null );
    siphon2.createAsEmbedded();
    setupParameters_op4_xjal( op4, null );
    doBeforeCreate_op4_xjal( op4, null );
    op4.createAsEmbedded();
    setupParameters_siphon3_xjal( siphon3, null );
    doBeforeCreate_siphon3_xjal( siphon3, null );
    siphon3.createAsEmbedded();
    setupParameters_op5_xjal( op5, null );
    doBeforeCreate_op5_xjal( op5, null );
    op5.createAsEmbedded();
    setupParameters_op6_xjal( op6, null );
    doBeforeCreate_op6_xjal( op6, null );
    op6.createAsEmbedded();
    setupParameters_Sic_xjal( Sic, null );
    doBeforeCreate_Sic_xjal( Sic, null );
    Sic.createAsEmbedded();
	 // Port connectors with non-replicated objects
    pipeno7.in.connect( d1ofn1.out ); // connector
    pipeno6.in.connect( d1ofn2.out ); // connector1
    InputDivider1.out1.connect( pipeno24.in ); // connector6
    InputDivider1.out2.connect( pipeno18.in ); // connector7
    Bifer1.in1.connect( pipeno7.out ); // connector2
    pipeno6.out.connect( Bifer1.in2 ); // connector3
    Gate1.in.connect( Bifer1.out ); // connector4
    Gate1.out.connect( InputDivider1.in ); // connector5
    bifer.in.connect( pipeno24.out ); // connector8
    pipeno17.in.connect( bifer.out1 ); // connector9
    pipeno22.in.connect( bifer.out2 ); // connector10
    Fic.in.connect( pipeno18.out ); // connector11
    Dispose.in.connect( Fic.out ); // connector12
    pipeno5.in.connect( d2ofn1.out ); // connector14
    pipeno4.in.connect( d2ofn2.out ); // connector15
    Bifer2.in1.connect( pipeno5.out ); // connector16
    pipeno4.out.connect( Bifer2.in2 ); // connector17
    Gate2.in.connect( Bifer2.out ); // connector18
    InputDivider2.in.connect( Gate2.out ); // connector19
    pipeno25.in.connect( InputDivider2.out1 ); // connector20
    InputDivider2.out2.connect( pipeno16.in ); // connector21
    pipeno30.in.connect( siphon1.out ); // connector23
    bifer1.in.connect( pipeno30.out ); // connector24
    pipeno15.in.connect( bifer1.out1 ); // connector25
    bifer1.out2.connect( pipeno21.in ); // connector26
    pipeno14.in.connect( pipeno25.out ); // connector28
    pipeno29.in.connect( siphon2.out ); // connector30
    pipeno3.in.connect( d3ofn1.out ); // connector31
    pipeno2.in.connect( d3ofn2.out ); // connector32
    Bifer3.in1.connect( pipeno3.out ); // connector33
    pipeno2.out.connect( Bifer3.in2 ); // connector34
    Gate3.in.connect( Bifer3.out ); // connector35
    InputDivider3.in.connect( Gate3.out ); // connector36
    pipeno26.in.connect( InputDivider3.out1 ); // connector37
    InputDivider3.out2.connect( pipeno13.in ); // connector38
    bifer2.in.connect( pipeno29.out ); // connector40
    pipeno12.in.connect( bifer2.out1 ); // connector41
    pipeno20.in.connect( bifer2.out2 ); // connector42
    pipeno11.in.connect( pipeno26.out ); // connector43
    pipeno0.in.connect( d4ofn1.out ); // connector46
    pipeno1.in.connect( d4ofn2.out ); // connector47
    Bifer4.in1.connect( pipeno0.out ); // connector48
    pipeno1.out.connect( Bifer4.in2 ); // connector49
    Gate4.in.connect( Bifer4.out ); // connector50
    InputDivider4.in.connect( Gate4.out ); // connector51
    bifer3.in.connect( pipeno28.out ); // connector53
    pipeno10.in.connect( bifer3.out1 ); // connector54
    bifer3.out2.connect( pipeno19.in ); // connector55
    pipeno27.in.connect( InputDivider4.out1 ); // connector57
    pipeno8.in.connect( pipeno27.out ); // connector58
    pipeno8.out.connect( op6.in2 ); // connector59
    InputDivider4.out2.connect( pipeno9.in ); // connector60
    Dispose1.in.connect( pipeno21.out ); // connector62
    Dispose2.in.connect( pipeno20.out ); // connector63
    Dispose3.in.connect( pipeno19.out ); // connector64
    op.in1.connect( pipeno17.out ); // connector13
    pipeno16.out.connect( op.in2 ); // connector22
    siphon1.in.connect( op.out ); // connector65
    pipeno15.out.connect( op2.in1 ); // connector27
    pipeno14.out.connect( op2.in2 ); // connector29
    op3.in1.connect( op2.out ); // connector39
    pipeno13.out.connect( op3.in2 ); // connector66
    siphon2.in.connect( op3.out ); // connector67
    pipeno12.out.connect( op4.in1 ); // connector44
    pipeno11.out.connect( op4.in2 ); // connector45
    siphon3.out.connect( pipeno28.in ); // connector52
    op5.out.connect( siphon3.in ); // connector61
    op4.out.connect( op5.in1 ); // connector68
    pipeno9.out.connect( op5.in2 ); // connector69
    op6.in1.connect( pipeno10.out ); // connector70
    Sic.in.connect( op6.out ); // connector56
    // Creating replicated embedded objects
    setupInitialConditions_xjal( Main.class );
    // Dynamic initialization of persistent elements
    _createPersistentElementsBS0_xjal();
  }

  @AnyLogicInternalCodegenAPI
  public void setupExt_xjal(AgentExtension _ext) {
    // Agent properties setup
    if ( _ext instanceof ExtAgentContinuous && tryExt(ExtAgentContinuous.class) == null ) {
      ExtAgentContinuous _e = (ExtAgentContinuous) _ext;
      _e.setAutomaticVerticalRotation( true );
    }
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public void doStart() {
    super.doStart();
    d1ofn1.startAsEmbedded();
    d1ofn2.startAsEmbedded();
    pipeno7.startAsEmbedded();
    pipeno6.startAsEmbedded();
    pipeno24.startAsEmbedded();
    pipeno18.startAsEmbedded();
    InputDivider1.startAsEmbedded();
    Bifer1.startAsEmbedded();
    Gate1.startAsEmbedded();
    bifer.startAsEmbedded();
    pipeno17.startAsEmbedded();
    pipeno22.startAsEmbedded();
    Fic.startAsEmbedded();
    Dispose.startAsEmbedded();
    d2ofn1.startAsEmbedded();
    d2ofn2.startAsEmbedded();
    pipeno5.startAsEmbedded();
    pipeno4.startAsEmbedded();
    Bifer2.startAsEmbedded();
    Gate2.startAsEmbedded();
    InputDivider2.startAsEmbedded();
    pipeno25.startAsEmbedded();
    pipeno16.startAsEmbedded();
    pipeno30.startAsEmbedded();
    bifer1.startAsEmbedded();
    pipeno15.startAsEmbedded();
    pipeno21.startAsEmbedded();
    pipeno14.startAsEmbedded();
    pipeno29.startAsEmbedded();
    d3ofn1.startAsEmbedded();
    d3ofn2.startAsEmbedded();
    pipeno3.startAsEmbedded();
    pipeno2.startAsEmbedded();
    Bifer3.startAsEmbedded();
    Gate3.startAsEmbedded();
    InputDivider3.startAsEmbedded();
    pipeno26.startAsEmbedded();
    pipeno13.startAsEmbedded();
    bifer2.startAsEmbedded();
    pipeno12.startAsEmbedded();
    pipeno20.startAsEmbedded();
    pipeno11.startAsEmbedded();
    d4ofn1.startAsEmbedded();
    d4ofn2.startAsEmbedded();
    pipeno0.startAsEmbedded();
    pipeno1.startAsEmbedded();
    Bifer4.startAsEmbedded();
    Gate4.startAsEmbedded();
    InputDivider4.startAsEmbedded();
    pipeno28.startAsEmbedded();
    bifer3.startAsEmbedded();
    pipeno10.startAsEmbedded();
    pipeno19.startAsEmbedded();
    pipeno27.startAsEmbedded();
    pipeno8.startAsEmbedded();
    pipeno9.startAsEmbedded();
    Dispose1.startAsEmbedded();
    Dispose2.startAsEmbedded();
    Dispose3.startAsEmbedded();
    op.startAsEmbedded();
    siphon1.startAsEmbedded();
    op2.startAsEmbedded();
    op3.startAsEmbedded();
    siphon2.startAsEmbedded();
    op4.startAsEmbedded();
    siphon3.startAsEmbedded();
    op5.startAsEmbedded();
    op6.startAsEmbedded();
    Sic.startAsEmbedded();
  }
 

  /**
   * Assigning initial values for plain variables<br>
   * <em>This method isn't designed to be called by user and may be removed in future releases.</em>
   */
  @AnyLogicInternalCodegenAPI
  public void setupPlainVariables_xjal() {
    setupPlainVariables_Main_xjal();
  }

  /**
   * Assigning initial values for plain variables<br>
   * <em>This method isn't designed to be called by user and may be removed in future releases.</em>
   */
  @AnyLogicInternalCodegenAPI
  private void setupPlainVariables_Main_xjal() {
  }

  // User API -----------------------------------------------------
  @AnyLogicInternalCodegenAPI
  public static LinkToAgentAnimationSettings _connections_commonAnimationSettings_xjal = new LinkToAgentAnimationSettingsImpl( false, black, 1.0, LINE_STYLE_SOLID, ARROW_NONE, 0.0 );

  public LinkToAgentCollection<Agent, Agent> connections = new LinkToAgentStandardImpl<Agent, Agent>(this, _connections_commonAnimationSettings_xjal);
  @Override
  public LinkToAgentCollection<? extends Agent, ? extends Agent> getLinkToAgentStandard_xjal() {
    return connections;
  }


  @AnyLogicInternalCodegenAPI
  public void drawLinksToAgents(boolean _underAgents_xjal, LinkToAgentAnimator _animator_xjal) {
    super.drawLinksToAgents(_underAgents_xjal, _animator_xjal);
    if ( _underAgents_xjal ) {
      _animator_xjal.drawLink( this, connections, true, true );
    }
  }

  public List<Object> getEmbeddedObjects() {
    List<Object> list = super.getEmbeddedObjects();
    if (list == null) {
      list = new LinkedList<Object>();
    }
    list.add( d1ofn1 );
    list.add( d1ofn2 );
    list.add( pipeno7 );
    list.add( pipeno6 );
    list.add( pipeno24 );
    list.add( pipeno18 );
    list.add( InputDivider1 );
    list.add( Bifer1 );
    list.add( Gate1 );
    list.add( bifer );
    list.add( pipeno17 );
    list.add( pipeno22 );
    list.add( Fic );
    list.add( Dispose );
    list.add( d2ofn1 );
    list.add( d2ofn2 );
    list.add( pipeno5 );
    list.add( pipeno4 );
    list.add( Bifer2 );
    list.add( Gate2 );
    list.add( InputDivider2 );
    list.add( pipeno25 );
    list.add( pipeno16 );
    list.add( pipeno30 );
    list.add( bifer1 );
    list.add( pipeno15 );
    list.add( pipeno21 );
    list.add( pipeno14 );
    list.add( pipeno29 );
    list.add( d3ofn1 );
    list.add( d3ofn2 );
    list.add( pipeno3 );
    list.add( pipeno2 );
    list.add( Bifer3 );
    list.add( Gate3 );
    list.add( InputDivider3 );
    list.add( pipeno26 );
    list.add( pipeno13 );
    list.add( bifer2 );
    list.add( pipeno12 );
    list.add( pipeno20 );
    list.add( pipeno11 );
    list.add( d4ofn1 );
    list.add( d4ofn2 );
    list.add( pipeno0 );
    list.add( pipeno1 );
    list.add( Bifer4 );
    list.add( Gate4 );
    list.add( InputDivider4 );
    list.add( pipeno28 );
    list.add( bifer3 );
    list.add( pipeno10 );
    list.add( pipeno19 );
    list.add( pipeno27 );
    list.add( pipeno8 );
    list.add( pipeno9 );
    list.add( Dispose1 );
    list.add( Dispose2 );
    list.add( Dispose3 );
    list.add( op );
    list.add( siphon1 );
    list.add( op2 );
    list.add( op3 );
    list.add( siphon2 );
    list.add( op4 );
    list.add( siphon3 );
    list.add( op5 );
    list.add( op6 );
    list.add( Sic );
    return list;
  }

  public AgentList<? extends Main> getPopulation() {
    return (AgentList<? extends Main>) super.getPopulation();
  }

  public List<? extends Main> agentsInRange( double distance ) {
    return (List<? extends Main>) super.agentsInRange( distance );
  }

  @AnyLogicInternalCodegenAPI
  public void onDestroy() {
    d1ofn1.onDestroy();
    d1ofn2.onDestroy();
    pipeno7.onDestroy();
    pipeno6.onDestroy();
    pipeno24.onDestroy();
    pipeno18.onDestroy();
    InputDivider1.onDestroy();
    Bifer1.onDestroy();
    Gate1.onDestroy();
    bifer.onDestroy();
    pipeno17.onDestroy();
    pipeno22.onDestroy();
    Fic.onDestroy();
    Dispose.onDestroy();
    d2ofn1.onDestroy();
    d2ofn2.onDestroy();
    pipeno5.onDestroy();
    pipeno4.onDestroy();
    Bifer2.onDestroy();
    Gate2.onDestroy();
    InputDivider2.onDestroy();
    pipeno25.onDestroy();
    pipeno16.onDestroy();
    pipeno30.onDestroy();
    bifer1.onDestroy();
    pipeno15.onDestroy();
    pipeno21.onDestroy();
    pipeno14.onDestroy();
    pipeno29.onDestroy();
    d3ofn1.onDestroy();
    d3ofn2.onDestroy();
    pipeno3.onDestroy();
    pipeno2.onDestroy();
    Bifer3.onDestroy();
    Gate3.onDestroy();
    InputDivider3.onDestroy();
    pipeno26.onDestroy();
    pipeno13.onDestroy();
    bifer2.onDestroy();
    pipeno12.onDestroy();
    pipeno20.onDestroy();
    pipeno11.onDestroy();
    d4ofn1.onDestroy();
    d4ofn2.onDestroy();
    pipeno0.onDestroy();
    pipeno1.onDestroy();
    Bifer4.onDestroy();
    Gate4.onDestroy();
    InputDivider4.onDestroy();
    pipeno28.onDestroy();
    bifer3.onDestroy();
    pipeno10.onDestroy();
    pipeno19.onDestroy();
    pipeno27.onDestroy();
    pipeno8.onDestroy();
    pipeno9.onDestroy();
    Dispose1.onDestroy();
    Dispose2.onDestroy();
    Dispose3.onDestroy();
    op.onDestroy();
    siphon1.onDestroy();
    op2.onDestroy();
    op3.onDestroy();
    siphon2.onDestroy();
    op4.onDestroy();
    siphon3.onDestroy();
    op5.onDestroy();
    op6.onDestroy();
    Sic.onDestroy();
    super.onDestroy();
  }

  @AnyLogicInternalCodegenAPI
  @Override
  public void doFinish() {
    super.doFinish();
    d1ofn1.doFinish();
    d1ofn2.doFinish();
    pipeno7.doFinish();
    pipeno6.doFinish();
    pipeno24.doFinish();
    pipeno18.doFinish();
    InputDivider1.doFinish();
    Bifer1.doFinish();
    Gate1.doFinish();
    bifer.doFinish();
    pipeno17.doFinish();
    pipeno22.doFinish();
    Fic.doFinish();
    Dispose.doFinish();
    d2ofn1.doFinish();
    d2ofn2.doFinish();
    pipeno5.doFinish();
    pipeno4.doFinish();
    Bifer2.doFinish();
    Gate2.doFinish();
    InputDivider2.doFinish();
    pipeno25.doFinish();
    pipeno16.doFinish();
    pipeno30.doFinish();
    bifer1.doFinish();
    pipeno15.doFinish();
    pipeno21.doFinish();
    pipeno14.doFinish();
    pipeno29.doFinish();
    d3ofn1.doFinish();
    d3ofn2.doFinish();
    pipeno3.doFinish();
    pipeno2.doFinish();
    Bifer3.doFinish();
    Gate3.doFinish();
    InputDivider3.doFinish();
    pipeno26.doFinish();
    pipeno13.doFinish();
    bifer2.doFinish();
    pipeno12.doFinish();
    pipeno20.doFinish();
    pipeno11.doFinish();
    d4ofn1.doFinish();
    d4ofn2.doFinish();
    pipeno0.doFinish();
    pipeno1.doFinish();
    Bifer4.doFinish();
    Gate4.doFinish();
    InputDivider4.doFinish();
    pipeno28.doFinish();
    bifer3.doFinish();
    pipeno10.doFinish();
    pipeno19.doFinish();
    pipeno27.doFinish();
    pipeno8.doFinish();
    pipeno9.doFinish();
    Dispose1.doFinish();
    Dispose2.doFinish();
    Dispose3.doFinish();
    op.doFinish();
    siphon1.doFinish();
    op2.doFinish();
    op3.doFinish();
    siphon2.doFinish();
    op4.doFinish();
    siphon3.doFinish();
    op5.doFinish();
    op6.doFinish();
    Sic.doFinish();
  }



}
